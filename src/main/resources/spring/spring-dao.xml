<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	  	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    <!--
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		&lt;!&ndash; 初始化连接大小 &ndash;&gt;
		<property name="initialSize" value="${jdbc.initialSize}" />
		&lt;!&ndash; 连接池最大数量 &ndash;&gt;
		<property name="maxActive" value="${jdbc.maxActive}" />
		&lt;!&ndash; 连接池最大空闲 &ndash;&gt;
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		&lt;!&ndash; 连接池最小空闲 &ndash;&gt;
		<property name="minIdle" value="${jdbc.minIdle}" />
		&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
		<property name="maxWait" value="${jdbc.maxWait}" />
	</bean>-->
	<!-- 阿里 druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="filters" value="${jdbc.filters}"/>
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${jdbc.maxActive}"/>
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}"/>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}"/>
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${jdbc.minIdle}"/>
		<!-- 配置间隔多久才进行一次检测,检测需要关闭的空闲连接,单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
		<!-- 配置一个连接在池中最小生存的时间,单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
		<property name="testOnReturn" value="${jdbc.testOnReturn}"/>
		<property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
		<!-- 打开 removeAbandoned 功能 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
		<!-- 1800 秒,也就是 30 分钟 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}"/>
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter"/>
				<ref bean="log-filter"/>
			</list>
		</property>
	</bean>
	<!-- 慢SQL记录 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->
		<property name="slowSqlMillis" value="200"/>
		<property name="logSlowSql" value="true"/>
	</bean>

	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="dataSourceLogEnabled" value="true" />
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/com.lewjun.mapper/*Mapper.xml"/>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lewjun.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
</beans>
